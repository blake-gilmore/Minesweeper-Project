/*
    1. Find difference between 0 and (RightX*4)
    2. Divide the difference by 2
    3. if (difference / 2) is not divisible by 4
        a. add 1 until it is
    4. Subtract 20 from (difference/2) and set as leftLim
    5. loop
        a. add one whole Y value of bytes to the leftmost value
        b. check all bytes between leftmost value and (leftLim + 40) for a
           blue value above 100
        c. If found, mark as TopOfSquares and exit loop
    6. Loop
        a. Add one Y value of bytes to topOfSquares
        b. if B of currentPixel drops below 100, mark as BottomOfFirstSquare and exit loop
        ----
    7. Find difference between TopOfSquares and BottomOfFirstSquare and set as MiddleOfFirstSquare
    8. Go to middleOfFirstSquare
    9. Loop
        a. Subtract 4 bytes
        b. If blue value drops below 100, mark as LeftOfFirstSquare and exit
    10. Loop
        a. Add 4 bytes
        b. If blue value drops below 100, mark as RightOfFirstSquare and exit
    11. Move to midpoint between Left and MiddleOfFirstSquare
    12.Loop
        a. Subtract Y value 
        b. If blue value drops below 100, reinitialize as topOfFirstSquare
    13. Loop
        a. Add Y value
        b. If blue value drops below 100, reinitialize as BottomOfFirstSquare
    14. Go to midpoint between Top,Bottom, Left, and Right
    15. Reinitialize as MiddleOfFirstSquare
    16. Loop
        a. jump (rightOfFirstSquare - LeftOfFirstSquare) pixels to the left
        b. If blue value drops below 100, mark coord of top left square as LeftCorner
    17. Set Counter to 1 and jump one square to the right
    18. Loop
        a. if blue value drops below 100, exit loop
        b. counter++
        c. jump one square to the right
    19. Set counter as gameColumns
    20. Jump back one square, reset counter, and jump one square down
    21. Loop
        a. If blue value drops below 100, exit loop
        b. counter++
        c. Jump one square down
    22. Set counter as gameRows
    23. Initialize mapSquares pointer with gameRows rows and gameColumns columns
    24. set indexes row and column to [0][0]
    25. Loop 
        a. Set xCoord and yCoord of mineSquare at [row][column]
        b. Set all pointers of current mineSquare to appropriate addresses of mapSquares
            i. Check every pointer if the nextSquare is out of the row and column of mapSquares, if it is, assign NULL instead
    */